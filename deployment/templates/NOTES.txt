1. Get the application URL by running these commands:
{{/*{{- if .Values.ingress.enabled }}*/}}
{{/*{{- range $host := .Values.ingress.hosts }}*/}}
{{/*  {{- range .paths }}*/}}
{{/*  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}*/}}
{{/*  {{- end }}*/}}
{{/*{{- end }}*/}}
{{/*{{- else if contains "NodePort" .Values.service.type }}*/}}
{{/*  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "rfbpa.fullname" . }})*/}}
{{/*  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")*/}}
{{/*  echo http://$NODE_IP:$NODE_PORT*/}}
{{/*{{- else if contains "LoadBalancer" .Values.service.type }}*/}}
{{/*     NOTE: It may take a few minutes for the LoadBalancer IP to be available.*/}}
{{/*           You can watch its status by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "rfbpa.fullname" . }}'*/}}
{{/*  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "rfbpa.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")*/}}
{{/*  echo http://$SERVICE_IP:{{ .Values.service.port }}*/}}
{{/*{{- else if contains "ClusterIP" .Values.service.type }}*/}}
{{/*  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "rfbpa.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")*/}}
{{/*  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")*/}}
{{/*  echo "Visit http://127.0.0.1:8080 to use your application"*/}}
{{/*  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT*/}}
{{/*{{- end }}*/}}


An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls
